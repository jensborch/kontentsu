plugins {
    id 'java'
    id 'checkstyle'
    id 'idea'
    id 'jacoco'
    id 'pmd'
    id "com.github.spotbugs" version "4.0.5"
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'de.aaschmid.cpd' version '3.1'
    id 'nebula.lint' version '16.6.0'
    id "com.moowork.node" version "1.2.0"
    id "org.myire.quill.cobertura" version "2.3.1"
    id "org.sonarqube" version "3.0.0"
    id "org.owasp.dependencycheck" version "5.3.2.1"
    id 'org.kordamp.gradle.jandex' version '0.4.0'
}

allprojects {
    group = 'dk.kontentsu'
    version = '2.0-SNAPSHOT'

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        options.encoding = 'UTF-8'
        options.incremental = true
        options.fork = true
    }

    apply plugin: 'nebula.lint'
    gradleLint.rules = ['unused-dependency']
    gradleLint.alwaysRun = false

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    tasks.withType(Exec) {
        doFirst {
            println commandLine
        }
    }    
    
    task spotbugs(
        group: "Verification",
        description: "Marker task to enabled Findbugs."
    )

    task pmd(
        group: "Verification",
        description: "Marker task to enabled PMD."
    )

    task checkstyle(
        group: "Verification",
        description: "Marker task to enabled Checkstyle."
    )

    repositories {
        jcenter()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java-library'    
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'org.kordamp.gradle.jandex'

    gradle.taskGraph.whenReady { taskGraph ->
        tasks.spotbugsMain.onlyIf {
            taskGraph.hasTask((tasks.spotbugs))
        }
        tasks.spotbugsTest.onlyIf {
            taskGraph.hasTask((tasks.spotbugs))
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        tasks.pmdMain.onlyIf {
            taskGraph.hasTask((tasks.pmd))
        }
        tasks.pmdTest.onlyIf {
            taskGraph.hasTask((tasks.pmd))
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        tasks.checkstyleMain.onlyIf {
            taskGraph.hasTask((tasks.checkstyle))
        }
        tasks.checkstyleTest.onlyIf {
            taskGraph.hasTask((tasks.checkstyle))
        }
    }

    checkstyle {
        toolVersion = checkstyleVersion
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }

    spotbugs {
        toolVersion = spotbugsVersion
        ignoreFailures = true       
        excludeFilter = file("$rootProject.projectDir/config/spotbugs/exclude.xml")
    }

    jacoco {
        toolVersion = "$jacocoVersion"
    }

    pmd {
        toolVersion = pmdVersion
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        ruleSetFiles = files("$rootProject.projectDir/config/pmd/ruleset.xml")
    }

    plugins.withType(JavaBasePlugin) {
        check.dependsOn(rootProject.cpdCheck)
    }

    cpd {
        toolVersion = pmdVersion
        ignoreFailures = true
        ignoreAnnotations = true
        minimumTokenCount = 50
    }

    cpdCheck {
        reports {
            text.enabled = false
            xml.enabled = true
        }
        source = sourceSets.main.allJava
    }

    test {
        useJUnitPlatform()
        
        forkEvery = 1

        testLogging {
            events "passed", "skipped", "failed"
        }
        
        finalizedBy jacocoTestReport
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        appendix = 'javadoc'
        from(javadoc.destinationDir) {
            into "META-INF/resources/webjars/${archiveBaseName}"
        }
    }

    dependencies {
        implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

        implementation 'io.quarkus:quarkus-smallrye-fault-tolerance'
        implementation 'io.quarkus:quarkus-quartz'
        implementation 'io.quarkus:quarkus-hibernate-orm'
        implementation 'io.quarkus:quarkus-jdbc-h2'
        implementation 'io.quarkus:quarkus-narayana-jta'
        implementation 'io.quarkus:quarkus-resteasy'
        implementation 'io.quarkus:quarkus-resteasy-jackson'
        implementation 'io.quarkus:quarkus-hibernate-validator'
        
        implementation 'com.google.code.findbugs:annotations:' + findbugsAnnotationsVersion
        implementation 'com.facebook.infer.annotation:infer-annotation:' + inferVersion

        testImplementation 'io.quarkus:quarkus-junit5'
        testImplementation 'io.quarkus:quarkus-test-h2'        
        testImplementation 'io.rest-assured:rest-assured'

        testImplementation 'eu.codearte.catch-exception:catch-exception:' + catchExceptionVersion
        testImplementation 'org.mockito:mockito-core:' + mockitoVersion
        testImplementation 'org.mockito:mockito-junit-jupiter:' + mockitoVersion
        testImplementation 'org.hamcrest:hamcrest:' + hamcrestVersion
    }

    spotbugsMain {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }
    
    jacocoTestReport {
        reports {
            xml.enabled = true
            csv.enabled = false
            html.enabled = true
        }
    }
}

idea {
    module {
        downloadJavadoc = true
    }
}

node {
    version = '10.15.0'
    npmVersion = '6.4.1'
    nodeModulesDir = file("${project.projectDir}/client")
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")
        html.enabled false
        csv.enabled false
    }
}

task testAngular(type: NpmTask) {
    args = ['test', '--', '--watch=false', '--code-coverage', "--browsers ChromeHeadless"]
}

task lintAngular(type: NpmTask) {
    args = [ 'run-script', 'lint', '--', '--single-run']
}

testAngular.dependsOn(npm_install)
lintAngular.dependsOn(npm_install)
