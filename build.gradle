buildscript {
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:4.0.1'
    }
}

plugins {
    id 'java'
    id 'checkstyle'
    id 'idea'
    id 'jacoco'
    id 'pmd'
    id "com.github.spotbugs" version "4.0.5"
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'de.aaschmid.cpd' version '3.1'
    id 'nebula.lint' version '16.5.2'
    id "com.moowork.node" version "1.2.0"
    id "org.myire.quill.cobertura" version "2.3.1"
    id "org.sonarqube" version "2.6.2"
}

ext {
    log4jVersion = '2.8.2'
    javaeeVersion = '7.0-1'
    h2Version = '1.4.197'
    jacksonVersion = '2.8.5'
    jerseyVersion = '2.22.2'
    hibernateVersion = '5.2.11.Final'
    querydslVersion = "4.2.1"
    fileuploadVersion = "1.3.3"
    ownerVersion = '1.0.10'
    hashidsVersion = '1.0.3'
    esapiVersion = '2.1.0.1'
    jjwtVersion = '0.9.0'
    jschNioVersion = '1.0.12'
    findbugsAnnotationsVersion = '3.0.1u2'
    inferVersion = '0.11.2'

    swaggerUiVersion = '3.20.3'
    swaggerVersion = '1.5.16'
    angularMaterialVersion = '1.1.3'
    angularVersion = '1.6.1'
    materialDesignIconsVersions = '2.2.0'

    payaraVersion = '4.1.2.181'

    checkstyleVersion = "7.8.1"
    spotbugsVersion =  "3.1.9"
    pmdVersion = "6.22.0"
    openejbVersion = '7.1.0'
    junitVersion = '4.13'
    jacocoVersion = "0.8.2"
    mockitoVersion = '3.3.3'
    hamcrestVersion = '2.0.0.0'
    catchExceptionVersion = '1.4.4'
    restAssuredVersion = '3.2.0'
    jglueVersion = '4.1.0'
    weldVersion = '2.4.8.Final'
}

defaultTasks 'build'

allprojects {
    group = 'dk.kontentsu'
    version = '1.0-SNAPSHOT'

    compileJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.encoding = 'UTF-8'
        options.incremental = true
        options.fork = true
    }

    apply plugin: 'nebula.lint'
    gradleLint.rules = ['unused-dependency']
    gradleLint.alwaysRun = false

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    tasks.withType(Exec) {
        doFirst {
            println commandLine
        }
    }    
    
    task spotbugs(
        group: "Verification",
        description: "Marker task to enabled Findbugs."
    )

    task pmd(
        group: "Verification",
        description: "Marker task to enabled PMD."
    )

    task checkstyle(
        group: "Verification",
        description: "Marker task to enabled Checkstyle."
    )

    repositories {
        jcenter()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'

    gradle.taskGraph.whenReady { taskGraph ->
        tasks.spotbugsMain.onlyIf {
            taskGraph.hasTask((tasks.spotbugs))
        }
        tasks.spotbugsTest.onlyIf {
            taskGraph.hasTask((tasks.spotbugs))
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        tasks.pmdMain.onlyIf {
            taskGraph.hasTask((tasks.pmd))
        }
        tasks.pmdTest.onlyIf {
            taskGraph.hasTask((tasks.pmd))
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        tasks.checkstyleMain.onlyIf {
            taskGraph.hasTask((tasks.checkstyle))
        }
        tasks.checkstyleTest.onlyIf {
            taskGraph.hasTask((tasks.checkstyle))
        }
    }

    checkstyle {
        toolVersion = checkstyleVersion
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }

    spotbugs {
        toolVersion = spotbugsVersion
        ignoreFailures = true
        onlyAnalyze = [sourceSets.main]
        excludeFilter = file("$rootProject.projectDir/config/spotbugs/exclude.xml")
    }

    jacoco {
        toolVersion = "$jacocoVersion"
    }

    pmd {
        toolVersion = pmdVersion
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        ruleSetFiles = files("$rootProject.projectDir/config/pmd/ruleset.xml")
    }

    plugins.withType(JavaBasePlugin) {
        check.dependsOn(rootProject.cpdCheck)
    }

    cpd {
        toolVersion = pmdVersion
        ignoreFailures = true
        ignoreAnnotations = true
        minimumTokenCount = 50
    }

    cpdCheck {
        reports {
            text.enabled = false
            xml.enabled = true
        }
        source = sourceSets.main.allJava
    }

    test {
        finalizedBy jacocoTestReport
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output
                runtimeClasspath += output + main.output
                srcDir file('src/it/java')
            }
            java.outputDir = file("$buildDir/classes/java/integration-test")
        }
    }

    task integrationTest(type: Test) {
        description = 'Run integration tests'
        testClassesDirs = files(sourceSets.integrationTest.java.outputDir)
        classpath = sourceSets.main.runtimeClasspath + sourceSets.integrationTest.runtimeClasspath
        testReportDirName = 'integration-test'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        appendix = 'javadoc'
        from(javadoc.destinationDir) {
            into "META-INF/resources/webjars/${baseName}"
        }
    }

    dependencies {

        compile 'org.apache.logging.log4j:log4j-api:' + log4jVersion
        compile 'com.google.code.findbugs:annotations:' + findbugsAnnotationsVersion
        compile 'com.facebook.infer.annotation:infer-annotation:' + inferVersion

        testCompile 'junit:junit:' + junitVersion
        testCompile 'org.apache.logging.log4j:log4j-core:' + log4jVersion
        testCompile 'eu.codearte.catch-exception:catch-exception:' + catchExceptionVersion
        testCompile 'org.mockito:mockito-core:' + mockitoVersion
        testCompile 'org.hamcrest:hamcrest-junit:' + hamcrestVersion

        integrationTestCompile 'junit:junit:' + junitVersion
        integrationTestCompile 'org.apache.logging.log4j:log4j-core:' + log4jVersion
        integrationTestCompile 'eu.codearte.catch-exception:catch-exception:' + catchExceptionVersion
        integrationTestCompile 'org.hamcrest:hamcrest-junit:' + hamcrestVersion
    }

    spotbugsMain {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }
    
    jacocoTestReport {
        reports {
            xml.enabled = true
            csv.enabled = false
            html.enabled = true
        }
    }
}

idea {
    module {
        downloadJavadoc = true
    }
}

node {
    version = '10.15.0'
    npmVersion = '6.4.1'
    nodeModulesDir = file("${project.projectDir}/client")
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")
        html.enabled false
        csv.enabled false
    }
}

task testAngular(type: NpmTask) {
    args = ['test', '--', '--watch=false', '--code-coverage', "--browsers ChromeHeadless"]
}

task lintAngular(type: NpmTask) {
    args = [ 'run-script', 'lint', '--', '--single-run']
}

testAngular.dependsOn(npm_install)
lintAngular.dependsOn(npm_install)
