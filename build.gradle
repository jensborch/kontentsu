buildscript {
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:1.4.5'
    }
}

plugins {
    id 'java'
    id 'checkstyle'
    id 'findbugs'
    id 'idea'
    id 'jacoco'
    id 'pmd'
    id 'com.github.ben-manes.versions' version '0.14.0'
    id 'de.aaschmid.cpd' version '1.0' 
    id 'nebula.lint' version '6.8.0'
}

ext {
    log4jVersion = '2.8'
    javaeeVersion = '7.0-1'
    h2Version = '1.4.193'
    jacksonVersion = '2.8.1'
    jerseyVersion = '2.22.2'
    hibernateVersion = '5.2.7.Final'
    querydslVersion = "4.1.4"
    fileuploadVersion = "1.3.2"
    ownerVersion = '1.0.9'
    hashidsVersion = '1.0.1'
    esapiVersion = '2.1.0.1'
    jjwtVersion = '0.7.0'
    jschNioVersion = '1.0.4'
    findbugsAnnotationsVersion = '3.0.1u2';

    swaggerUiVersion = '2.2.10-1'
    swaggerVersion = '1.5.12'
    angularMaterialVersion = '1.1.3'
    angularVersion = '1.6.1'
    materialDesignIconsVersions = '2.2.0'

    payaraVersion = '4.1.1.164'

    checkstyleVersion = "7.5.1"
    findbugsVersion =  "3.0.1"
    pmdVersion = "5.5.3"
    openejbVersion = '7.0.1'
    junitVersion = '4.12'
    jacocoVersion = "0.7.9"
    mockitoVersion = '1.10.19'
    catchExceptionVersion = '1.4.4'
    restAssuredVersion = '3.0.2'
    jglueVersion = '3.1.4'
}

defaultTasks 'build'

allprojects {
    group = 'dk.kontentsu'
    version = '1.0-SNAPSHOT'

    compileJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.encoding = 'UTF-8'
        options.incremental = true
        options.fork = true
    }
    
    apply plugin: 'nebula.lint'
    gradleLint.rules = ['unused-dependency'] 
    
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    tasks.withType(Exec) {
        doFirst {
            println commandLine
        }
    }
    
    repositories {
        jcenter()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'
     
    checkstyle {
        toolVersion = checkstyleVersion
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }

    findbugs {
        toolVersion = findbugsVersion
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        excludeFilter = file("$rootProject.projectDir/config/findbugs/exclude.xml")
    }

    jacoco {
        toolVersion = jacocoVersion
    }

    pmd {
        toolVersion = pmdVersion
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        ruleSetFiles = files("$rootProject.projectDir/config/pmd/ruleset.xml")
    }
    
    plugins.withType(JavaBasePlugin) {
        check.dependsOn(rootProject.cpdCheck)
    }    
    
    cpd {
        toolVersion = pmdVersion
        ignoreFailures = true
        ignoreAnnotations = true
        minimumTokenCount = 50
    }
    
    cpdCheck {
        reports {
            text.enabled = false
            xml.enabled = true
        }
        source = sourceSets.main.allJava
    }

    test {
        finalizedBy jacocoTestReport
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output
                runtimeClasspath += output + main.output
                srcDir file('src/it/java')
            }
            output.classesDir = "$buildDir/classes/integration-test"
        }
    }

    task integrationTest(type: Test) {
        description = 'Run integration tests'
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.main.runtimeClasspath + sourceSets.integrationTest.runtimeClasspath
        reports {
            html.destination = "$buildDir/reports/integration-test"
            junitXml.destination = "$buildDir/integration-test-results"
        }
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        appendix = 'javadoc'
        from(javadoc.destinationDir) { 
            into "META-INF/resources/webjars/${baseName}"
        }
    }

    dependencies {

        compile 'org.apache.logging.log4j:log4j-api:' + log4jVersion
        compile 'org.apache.logging.log4j:log4j-slf4j-impl:' + log4jVersion
        compile 'org.apache.logging.log4j:log4j-1.2-api:' + log4jVersion
        compile 'com.google.code.findbugs:annotations:' + findbugsAnnotationsVersion

        testCompile 'junit:junit:' + junitVersion
        testCompile 'org.apache.logging.log4j:log4j-core:' + log4jVersion
        testCompile 'eu.codearte.catch-exception:catch-exception:' + catchExceptionVersion
        testCompile 'org.mockito:mockito-all:' + mockitoVersion

        integrationTestCompile 'junit:junit:' + junitVersion
        integrationTestCompile 'org.apache.logging.log4j:log4j-core:' + log4jVersion
        integrationTestCompile 'eu.codearte.catch-exception:catch-exception:' + catchExceptionVersion
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
            html {
                enabled true
                destination "${buildDir}/reports/jacoco"
            }
        }
    }
}

idea {
    module {
        downloadJavadoc = true
    }
}
