plugins {
    id 'war'
}

apply plugin: 'war'

def warFile = 'cdn.war'

war {
    archiveName = "${warFile}"
}

configurations {
    payara
    /*compile.exclude group: 'org.glassfish.jersey.media'
    compile.exclude group: 'com.fasterxml.jackson.jaxrs'
    compile.exclude group: 'com.fasterxml.jackson.core'
    compile.exclude group: 'com.fasterxml.jackson.annotations'
    compile.exclude group: 'com.fasterxml.jackson.databind'
    compile.exclude group: 'org.apache.tomee'
    compile.exclude group: 'javax.annotation'
    compile.exclude group: 'javax.inject'
    compile.exclude group: 'javax.enterprise'
    compile.exclude group: 'org.apache.geronimo.specs'*/
}

dependencies {
    compile (project(':core')) {
        exclude group: 'org.glassfish.jersey.media'
        exclude group: 'com.fasterxml.jackson.jaxrs'
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.annotations'
        exclude group: 'com.fasterxml.jackson.databind'
        exclude group: 'org.apache.tomee'
        exclude group: 'javax.annotation'
        exclude group: 'javax.inject'
        exclude group: 'javax.enterprise'
        exclude group: 'org.apache.geronimo.specs'
    }
    compile (project(':util')) {
        exclude group: 'org.glassfish.jersey.media'
        exclude group: 'com.fasterxml.jackson.jaxrs'
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.annotations'
        exclude group: 'com.fasterxml.jackson.databind'
        exclude group: 'org.apache.tomee'
        exclude group: 'javax.annotation'
        exclude group: 'javax.inject'
        exclude group: 'javax.enterprise'
        exclude group: 'org.apache.geronimo.specs'
    }

    compile('com.fasterxml.jackson.datatype:jackson-datatype-jdk8:' + jacksonVersion) {
        transitive = false
    }
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:' + jacksonVersion) {
        transitive = false
    }
    compile('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:' + jacksonVersion) {
        transitive = false
    }

    compile 'org.apache.logging.log4j:log4j-web:' + log4jVersion
    compile 'commons-fileupload:commons-fileupload:' + fileuploadVersion
    compile 'org.aeonbits.owner:owner:' + ownerVersion;
    compile 'org.aeonbits.owner:owner-java8:' + ownerVersion;
    compile 'com.h2database:h2:' + h2Version

    compile 'org.webjars:angular-material:' + angularMaterialVersion
    compile 'org.webjars:angularjs:' + angularVersion
    compile 'org.webjars:swagger-ui:' + swaggerUiVersion

    payara 'fish.payara.extras:payara-micro:' + payaraVersion

    providedCompile 'javax.cache:cache-api:' + cacheApiversion
    providedCompile 'org.apache.tomee:javaee-api:' + javaeeVersion
    providedCompile 'com.fasterxml.jackson.core:jackson-databind:' + jacksonVersion
    providedCompile 'org.glassfish.jersey.media:jersey-media-json-jackson:' + jerseyVersion

    testCompile project(':test')
    testCompile 'org.glassfish.jersey.ext:jersey-bean-validation:'  + jerseyVersion
    testCompile 'org.glassfish.jersey.test-framework:jersey-test-framework-core:' + jerseyVersion
    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:' + jerseyVersion
    testCompile 'io.rest-assured:rest-assured:' + restAssuredVersion
}

def payaraJar = configurations.payara.find { it.name == "payara-micro-" + payaraVersion + ".jar" }
def payaraPort = 9090

task startPayara(type:Exec) {
    commandLine 'java' ,'-jar', "${payaraJar}", '--port', "${payaraPort}", '--deploy', "build/libs/${warFile}"
}

task startPayaraDebug(type:Exec) {
    commandLine 'java', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=9009', '-jar', "${payaraJar}", '--port', "${payaraPort}", '--deploy', "build/libs/${warFile}"
}

task uberJar(type: Exec) {
    commandLine 'java', '-jar', "${payaraJar}", '--deploy', "build/libs/${warFile}", '--outputUberJar', 'build/cdn.jar'
}

uberJar.dependsOn war
startPayaraDebug.dependsOn war
startPayara.dependsOn war
